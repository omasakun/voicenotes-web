// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@monorepo/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  inviterId       String?
  inviter         User?            @relation("Invitations", fields: [inviterId], references: [id], onDelete: Restrict)
  invitee         User[]           @relation("Invitations")
  sentInvitations Invitation[]     @relation("SentInvitations")
  audioRecordings AudioRecording[]

  @@unique([email])
  @@map("user")
}

model Invitation {
  id        String  @id @default(cuid(2))
  code      String  @unique
  email     String?
  maxUses   Int     @default(1)
  usedCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  inviterId String
  inviter   User   @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Session {
  id             String   @id
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model AudioRecording {
  id           String          @id @default(cuid())
  title        String?
  originalName String // User's original filename
  filePath     String // Relative path: uploads/user-id/cuid.ext
  fileSize     Int
  duration     Float? // Duration in seconds
  mimeType     String
  status       RecordingStatus @default(PENDING)

  // Transcription fields
  transcription         String?
  transcriptionProgress Float   @default(0) // 0-100
  transcriptionError    String?
  whisperData           String? // JSON string containing full verbose whisper response

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@map("audio_recording")
}

enum RecordingStatus {
  PENDING // Just uploaded, waiting for processing
  PROCESSING // Currently being transcribed
  COMPLETED // Transcription completed successfully
  FAILED // Transcription failed

  @@map("recording_status")
}
